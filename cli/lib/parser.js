// Generated by CoffeeScript 1.12.1
var $, Element, Regular, S, Template, Utils, bindEvents, catchEvents, parseAttr, parseEvent, parseProps, parseStyle;

$ = require('cheerio');

S = require('string');

Regular = require('./regular');

Utils = require('./utils');

Element = require('./element/element');

Template = {
  react: require('./template/react'),
  wxml: require('./template/wxml')
};

bindEvents = ['bindtouchstart', 'bindtouchmove', 'bindtouchcancel', 'bindtouchend', 'bindtap', 'bindlongtap'];

catchEvents = ['catchtouchstart', 'catchtouchmove', 'catchtouchcancel', 'catchtouchend', 'catchtap', 'catchlongtap'];

parseAttr = (function(_this) {
  return function(attrs) {
    var key, props, ret, styles, value;
    if (!attrs) {
      return {};
    }
    props = [];
    styles = [];
    ret = {};
    for (key in attrs) {
      value = attrs[key];
      if (bindEvents.indexOf(key) > 0 || catchEvents.indexOf(key) > 0) {
        ret[key] = parseEvent(value);
      } else if (key === 'class') {
        styles.push("styles." + value);
      } else if (key === 'style') {
        styles.push("{" + value + "}");
      } else {
        ret[key] = parseProps(value);
      }
    }
    return {
      props: props,
      styles: styles
    };
  };
})(this);

parseEvent = function(value) {
  value = Utils.clearBindLR(value);
  return "{(event)=> this['" + value + "''](event);}";
};

parseProps = function(value) {
  if (Regular.dataBind.test(value)) {
    return "{" + (Utils.chompBindLR(value)) + "}";
  } else {
    return value;
  }
};

parseStyle = function(value) {
  var css, i, len, props, ref, ref1, results;
  ref = style.split(';');
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    css = ref[i];
    if (S(css).isEmpty()) {
      continue;
    }
    results.push((ref1 = S(css).trim().s.split(/\s*:\s*/), props = ref1[0], value = ref1[1], ref1));
  }
  return results;
};

module.exports = {
  text: function(text, textParent) {
    var str;
    if (textParent == null) {
      textParent = false;
    }
    str = S(text).trim().s;
    if (Regular.dataBind.test(str)) {
      str = Utils.chompBindLR(str);
    }
    if (!textParent) {
      return Element.parse('text', [], [], str);
    } else {
      return str;
    }
  },
  node: function($node, children) {
    var attrs;
    attrs = parseAttr($node.attr());
    return Element.parse($node[0].name, attrs.props, attrs.styles, children);
  }
};
