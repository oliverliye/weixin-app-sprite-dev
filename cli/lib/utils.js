// Generated by CoffeeScript 1.12.1
var $, S;

$ = require('cheerio');

S = require('string');

module.exports = {
  isTextNode: function(dom) {
    var $dom;
    $dom = $(dom);
    return $dom[0].type === 'text';
  },
  isEmptyTextNode: function(dom) {
    var $dom;
    $dom = $(dom);
    return $dom[0].type === 'text' && S($dom.text()).isEmpty();
  },
  isCommentNode: function(dom) {
    var $dom;
    $dom = $(dom);
    return $dom[0].type === 'comment';
  },
  isInvalidNode: function(dom) {
    return this.isEmptyTextNode(dom) || this.isCommentNode(dom);
  },
  isIncludeNode: function(dom) {
    return dom.type === 'tag' && dom.name === 'include';
  },
  isImportNode: function(dom) {
    return dom.type === 'tag' && dom.name === 'import';
  },
  isTemplateNode: function(dom) {
    var name;
    return dom.type === 'tag' && dom.name === 'template' && !S(name = $(dom).attr('is')).isEmpty();
  },
  filterInvalidNode: function(nodes) {
    var i, len, node, ret;
    ret = [];
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      if (!(this.isEmptyTextNode(node) || this.isCommentNode(node))) {
        ret.push(node);
      }
    }
    return ret;
  },
  filterTemplateNode: function(nodes) {
    var i, len, node, ret;
    ret = [];
    for (i = 0, len = nodes.length; i < len; i++) {
      node = nodes[i];
      if (node.name !== 'template' && !$(node).attr('is')) {
        ret.push(node);
      }
    }
    return ret;
  },
  chompBindLR: function(str, lch, rch) {
    if (lch == null) {
      lch = '{';
    }
    if (rch == null) {
      rch = '}';
    }
    return str.replace(/\{\{/g, lch).replace(/\}\}/g, rch);
  },
  clearBindLR: function(str) {
    return str.replace(/\{\{/g, "").replace(/\}\}/g, "");
  }
};
