// Generated by CoffeeScript 1.11.1
var $, Config, S, Wxss, _, getPriority, parseClass, wxdbrn, wxssrn;

S = require('string');

_ = require('underscore');

$ = require('cheerio');

wxssrn = require('wxssrn');

wxdbrn = require('wxdatabindrn');

Config = require('../config');

parseClass = function(data) {
  var i, item, j, len, len1, name, ref, ref1, ref2, selector, selectors, style;
  selectors = [];
  ref = data.match(/[^\{^\}]+\{[^\{^\}]+\}/g);
  for (i = 0, len = ref.length; i < len; i++) {
    item = ref[i];
    ref1 = S(item).trim().s.split(/\{|\}/), name = ref1[0], style = ref1[1];
    ref2 = name.split(',');
    for (j = 0, len1 = ref2.length; j < len1; j++) {
      selector = ref2[j];
      selector = S(selector).trim().s;
      if (!S(selector).isEmpty()) {
        selector = selector.match(/[^\s]+/g).join(' ');
        selectors.push({
          selector: selector,
          style: wxssrn.parseStyle(style),
          priority: getPriority(selector)
        });
      }
    }
  }
  return selectors;
};

getPriority = function(selector) {
  var i, item, len, priority, ref;
  priority = 0;
  ref = selector.match(/\.\w+[\w\-]+|#\w+[\w\-]+|\w+[\w\-]+/g);
  for (i = 0, len = ref.length; i < len; i++) {
    item = ref[i];
    if (/#\w+[\w\-]+/.test(item)) {
      priority += 10000;
    } else if (/\.\w+[\w\-]+/.test(item)) {
      priority += 100;
    } else if (/\w+[\w\-]+/.test(item)) {
      priority += 1;
    }
  }
  return priority;
};

Wxss = (function() {
  function Wxss(data) {
    this.selectors = [];
    this.styles = {};
    data = data.replace(/\/\*[\s\S]*\*\//g, '');
    this.selectors = parseClass(data);
    this.selectors.sort(function(v1, v2) {
      if (v1.priority < v2.priority) {
        return -1;
      }
      if (v1.priority > v2.priority) {
        return 1;
      }
      return 0;
    });
  }

  Wxss.prototype.setToWxml = function(wxml) {
    var $wxml, i, item, len, ref, selectorMap, styleIndex;
    this.styles = {};
    $wxml = $(wxml);
    selectorMap = {};
    ref = this.selectors;
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      selectorMap[item.selector] = item.style;
      $(item.selector, $wxml).each(function(index, elem) {
        var $elem, style;
        $elem = $(elem);
        if (style = $elem.data("style")) {
          style = _.extend(style, item.style);
        } else {
          style = item.style;
        }
        return $elem.data("style", style);
      });
    }
    styleIndex = 0;
    return $('*', $wxml).each((function(_this) {
      return function(index, elem) {
        var $elem, cls, data, j, len1, ref1, style, styleData, styleStr;
        $elem = $(elem);
        data = $elem.data("style");
        cls = $elem.attr("class");
        style = $elem.attr('style');
        if (!(!S(data).isEmpty() || !S(cls).isEmpty() || !S(style).isEmpty())) {
          return;
        }
        styleData = {};
        if (data) {
          styleData = _.extend(styleData, data);
        }
        if (cls) {
          ref1 = cls.split(' ');
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            item = ref1[j];
            item = "." + item;
            if (selectorMap.hasOwnProperty(item)) {
              styleData = _.extend(styleData, selectorMap[item]);
            }
          }
          $elem.removeAttr('class');
        }
        if (style) {
          if (wxdbrn.isBind(style)) {
            styleStr = Config.varPrefix + "parseStyle(" + (wxdbrn.convert(style)) + ")";
            $elem.attr('style', styleStr);
          } else {
            styleData = _.extend(styleData, wxssrn.parseStyle(style));
            $elem.removeAttr('style');
          }
        }
        if (_.allKeys(styleData).length > 0) {
          $elem.attr('__styleindex', styleIndex);
          _this.styles["style" + styleIndex] = styleData;
          return styleIndex++;
        }
      };
    })(this));
  };

  Wxss.prototype.toStyleCode = function() {
    var content, name, pn, props, pv, ref, styles;
    styles = [];
    ref = this.styles;
    for (name in ref) {
      content = ref[name];
      props = [];
      for (pn in content) {
        pv = content[pn];
        props.push(pn + ": " + pv);
      }
      styles.push(name + ":{" + (props.join(",")) + "}");
    }
    if (styles.length <= 0) {
      return null;
    } else {
      return styles.join(",");
    }
  };

  Wxss.prototype.toClassCode = function() {
    var content, i, item, len, name, props, ref, ref1, styles;
    styles = [];
    ref = this.selectors;
    for (i = 0, len = ref.length; i < len; i++) {
      item = ref[i];
      if (item.priority !== 100) {
        continue;
      }
      props = [];
      ref1 = item.style;
      for (name in ref1) {
        content = ref1[name];
        props.push(name + ": " + content);
      }
      styles.push((S(item.selector).camelize().replaceAll(".", "").s) + ":{" + (props.join(",")) + "}");
    }
    if (styles.length <= 0) {
      return null;
    } else {
      return styles.join(",");
    }
  };

  return Wxss;

})();

module.exports = Wxss;
